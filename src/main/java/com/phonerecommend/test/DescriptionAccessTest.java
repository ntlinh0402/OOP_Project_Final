package com.phonerecommend.test;

import com.phonerecommend.model.Phone;
import com.phonerecommend.model.PhoneDescription;
import com.phonerecommend.repository.PhoneRepository;
import com.phonerecommend.repository.RepositoryFactory;

import java.util.List;
import java.util.Map;

/**
 * Test ƒë∆°n gi·∫£n ƒë·ªÉ ki·ªÉm tra xem c√≥ truy c·∫≠p ƒë∆∞·ª£c v√†o description kh√¥ng
 */
public class DescriptionAccessTest {

    public static void main(String[] args) {
        // Kh·ªüi t·∫°o repository
        RepositoryFactory.setRepositoryType(RepositoryFactory.RepositoryType.LOCAL_JSON);
        RepositoryFactory.setLocalJsonPath("data/phones.json");
        PhoneRepository repository = RepositoryFactory.getPhoneRepository();

        // L·∫•y t·∫•t c·∫£ ƒëi·ªán tho·∫°i
        List<Phone> phones = repository.getAllPhones();

        System.out.println("=== KI·ªÇM TRA TRUY C·∫¨P DESCRIPTION ===");
        System.out.println("T·ªïng s·ªë ƒëi·ªán tho·∫°i: " + phones.size());

        if (phones.isEmpty()) {
            System.out.println("‚ùå KH√îNG C√ì ƒêI·ªÜN THO·∫†I N√ÄO! Ki·ªÉm tra file JSON.");
            return;
        }

        // Test v·ªõi ƒëi·ªán tho·∫°i ƒë·∫ßu ti√™n
        Phone firstPhone = phones.get(0);
        System.out.println("\nüì± ƒêi·ªán tho·∫°i test: " + firstPhone.getName());

        // Ki·ªÉm tra description c√≥ null kh√¥ng
        PhoneDescription desc = firstPhone.getDescription();
        if (desc == null) {
            System.out.println("‚ùå DESCRIPTION L√Ä NULL!");
            return;
        }

        System.out.println("‚úì Description kh√¥ng null");

        // Ki·ªÉm tra t·∫•t c·∫£ attributes
        Map<String, String> allAttrs = desc.getAllAttributes();
        System.out.println("T·ªïng s·ªë attributes: " + allAttrs.size());

        // In ra c√°c keys c√≥ s·∫µn
        System.out.println("\n=== T·∫§T C·∫¢ KEYS TRONG DESCRIPTION ===");
        for (String key : allAttrs.keySet()) {
            System.out.println("Key: '" + key + "'");
        }

        // Ki·ªÉm tra c·ª• th·ªÉ c√°c key camera
        System.out.println("\n=== KI·ªÇM TRA KEYS CAMERA ===");
        testKey(desc, "Camera sau");
        testKey(desc, "T√≠nh nƒÉng camera");
        testKey(desc, "Camera tr∆∞·ªõc");
        testKey(desc, "Quay video");

        // Th·ª≠ v·ªõi methods c·ªßa PhoneDescription
        System.out.println("\n=== KI·ªÇM TRA METHODS C·ª¶A PHONEDESCRIPTION ===");
        System.out.println("getRearCamera(): " + desc.getRearCamera());
        System.out.println("getCameraFeatures(): " + desc.getCameraFeatures());
        System.out.println("getFrontCamera(): " + desc.getFrontCamera());

        // Test v·ªõi nhi·ªÅu ƒëi·ªán tho·∫°i
        System.out.println("\n=== KI·ªÇM TRA V·ªöI 3 ƒêI·ªÜN THO·∫†I ƒê·∫¶U ===");
        for (int i = 0; i < Math.min(3, phones.size()); i++) {
            Phone phone = phones.get(i);
            System.out.println("\n" + (i+1) + ". " + phone.getName());

            String cameraRear = phone.getDescription().getAttribute("Camera sau");
            String cameraFeature = phone.getDescription().getAttribute("T√≠nh nƒÉng camera");

            System.out.println("   Camera sau: " + (cameraRear != null ? "C√ì D·ªÆ LI·ªÜU" : "NULL/TR·ªêNG"));
            System.out.println("   T√≠nh nƒÉng camera: " + (cameraFeature != null ? "C√ì D·ªÆ LI·ªÜU" : "NULL/TR·ªêNG"));

            if (cameraRear != null) {
                System.out.println("   Camera sau (50 k√Ω t·ª± ƒë·∫ßu): " +
                        cameraRear.substring(0, Math.min(50, cameraRear.length())) + "...");
            }
        }
    }

    private static void testKey(PhoneDescription desc, String key) {
        String value = desc.getAttribute(key);
        System.out.println("Key '" + key + "': " +
                (value != null && !value.trim().isEmpty() ? "C√ì D·ªÆ LI·ªÜU" : "TR·ªêNG/NULL"));
        if (value != null && !value.trim().isEmpty()) {
            System.out.println("  N·ªôi dung (50 k√Ω t·ª± ƒë·∫ßu): " +
                    value.substring(0, Math.min(50, value.length())) + "...");
        }
    }
}