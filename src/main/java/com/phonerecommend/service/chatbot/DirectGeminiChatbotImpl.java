package com.phonerecommend.service.chatbot;

import com.phonerecommend.model.Phone;
import com.phonerecommend.repository.PhoneRepository;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Direct Gemini API Integration - T√≠ch h·ª£p tr·ª±c ti·∫øp Gemini API
 */
public class DirectGeminiChatbotImpl implements ChatbotService {

    private final PhoneRepository phoneRepository;
    private final HttpClient httpClient;
    private List<Phone> phones;
    private boolean isInitialized;

    // THAY B·∫∞NG API KEY C·ª¶A B·∫†N - L·∫§Y T·ª™ https://aistudio.google.com/
    private static String GEMINI_API_KEY = "YOUR_GEMINI_API_KEY_HERE";
    private final String GEMINI_API_URL_BASE = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=";

    public DirectGeminiChatbotImpl(PhoneRepository phoneRepository) {
        this.phoneRepository = phoneRepository;
        this.httpClient = HttpClient.newBuilder()
                .connectTimeout(Duration.ofSeconds(10))
                .build();
        this.isInitialized = false;
    }

    @Override
    public boolean initialize() {
        try {
            System.out.println("üîÑ Kh·ªüi t·∫°o Direct Gemini Chatbot...");

            // Ki·ªÉm tra API key
            if (GEMINI_API_KEY.equals("YOUR_GEMINI_API_KEY_HERE")) {
                System.err.println("‚ùå Ch∆∞a c·∫•u h√¨nh GEMINI_API_KEY!");
                System.err.println("üí° Vui l√≤ng l·∫•y API key t·ª´: https://aistudio.google.com/");
                return false;
            }

            // T·∫£i d·ªØ li·ªáu ƒëi·ªán tho·∫°i
            phones = phoneRepository.getAllPhones();
            System.out.println("‚úÖ ƒê√£ t·∫£i " + phones.size() + " ƒëi·ªán tho·∫°i");

            // Test Gemini API v·ªõi c√¢u h·ªèi ƒë∆°n gi·∫£n
            System.out.println("üîó Test k·∫øt n·ªëi Gemini API...");
            String testResponse = callGeminiAPI("Xin ch√†o", "");

            if (testResponse != null && !testResponse.isEmpty()) {
                System.out.println("‚úÖ K·∫øt n·ªëi Gemini API th√†nh c√¥ng!");
                System.out.println("ü§ñ Test response: " + testResponse.substring(0, Math.min(100, testResponse.length())) + "...");
                isInitialized = true;
                return true;
            } else {
                System.err.println("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Gemini API");
                return false;
            }

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói kh·ªüi t·∫°o: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public String processQuestion(String question) {
        if (!isInitialized) {
            return "‚ùå Chatbot ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng ki·ªÉm tra API key v√† th·ª≠ l·∫°i.";
        }

        try {
            System.out.println("üí¨ X·ª≠ l√Ω c√¢u h·ªèi: " + question);

            // T√¨m ƒëi·ªán tho·∫°i li√™n quan
            List<Phone> relevantPhones = findRelevantPhones(question, 5);
            System.out.println("üîç T√¨m th·∫•y " + relevantPhones.size() + " ƒëi·ªán tho·∫°i li√™n quan");

            // T·∫°o context t·ª´ ƒëi·ªán tho·∫°i
            String phoneContext = createPhoneContext(relevantPhones);

            // G·ªçi Gemini API
            String response = callGeminiAPI(question, phoneContext);

            return response != null ? response : "‚ùå Xin l·ªói, kh√¥ng th·ªÉ x·ª≠ l√Ω c√¢u h·ªèi l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i.";

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói x·ª≠ l√Ω c√¢u h·ªèi: " + e.getMessage());
            return "‚ùå Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i.";
        }
    }

    /**
     * T√¨m ƒëi·ªán tho·∫°i li√™n quan ƒë·∫øn c√¢u h·ªèi
     */
    private List<Phone> findRelevantPhones(String query, int limit) {
        String queryLower = query.toLowerCase();

        // T√¨m ki·∫øm theo multiple criteria
        return phones.stream()
                .filter(phone -> {
                    // T√¨m trong t√™n ƒëi·ªán tho·∫°i
                    if (phone.getName().toLowerCase().contains(queryLower)) {
                        return true;
                    }

                    // T√¨m theo keywords ƒë·∫∑c bi·ªát
                    if (queryLower.contains("pin") || queryLower.contains("battery")) {
                        String battery = phone.getDescription().getAttribute("Pin");
                        return !battery.isEmpty();
                    }

                    if (queryLower.contains("camera") || queryLower.contains("ch·ª•p ·∫£nh")) {
                        String camera = phone.getDescription().getAttribute("Camera sau");
                        return !camera.isEmpty();
                    }

                    if (queryLower.contains("game") || queryLower.contains("gaming")) {
                        String chipset = phone.getDescription().getAttribute("Chipset");
                        return chipset.toLowerCase().contains("snapdragon") ||
                                chipset.toLowerCase().contains("apple") ||
                                chipset.toLowerCase().contains("dimensity");
                    }

                    if (queryLower.contains("iphone") || queryLower.contains("apple")) {
                        return phone.getName().toLowerCase().contains("iphone");
                    }

                    if (queryLower.contains("samsung") || queryLower.contains("galaxy")) {
                        return phone.getName().toLowerCase().contains("samsung") ||
                                phone.getName().toLowerCase().contains("galaxy");
                    }

                    // T√¨m theo gi√°
                    if (queryLower.contains("r·∫ª") || queryLower.contains("ti·∫øt ki·ªám")) {
                        return phone.getPrice() < 15000000; // D∆∞·ªõi 15 tri·ªáu
                    }

                    if (queryLower.contains("cao c·∫•p") || queryLower.contains("ƒë·∫Øt")) {
                        return phone.getPrice() > 20000000; // Tr√™n 20 tri·ªáu
                    }

                    // T√¨m trong description
                    for (String value : phone.getDescription().getAllAttributes().values()) {
                        if (value.toLowerCase().contains(queryLower)) {
                            return true;
                        }
                    }

                    return false;
                })
                .sorted(Comparator.comparingDouble(Phone::getPrice))
                .limit(limit)
                .collect(Collectors.toList());
    }

    /**
     * T·∫°o context t·ª´ danh s√°ch ƒëi·ªán tho·∫°i
     */
    private String createPhoneContext(List<Phone> relevantPhones) {
        if (relevantPhones.isEmpty()) {
            return "Kh√¥ng t√¨m th·∫•y ƒëi·ªán tho·∫°i ph√π h·ª£p v·ªõi y√™u c·∫ßu.";
        }

        StringBuilder context = new StringBuilder("D∆∞·ªõi ƒë√¢y l√† c√°c ƒëi·ªán tho·∫°i ph√π h·ª£p nh·∫•t:\n\n");

        for (int i = 0; i < relevantPhones.size(); i++) {
            Phone phone = relevantPhones.get(i);
            context.append(i + 1).append(". ").append(phone.getName()).append("\n");
            context.append("   üí∞ Gi√°: ").append(String.format("%,.0f", phone.getPrice())).append(" VNƒê\n");

            // Th√™m specs quan tr·ªçng
            String[] importantSpecs = {
                    "Chipset", "Dung l∆∞·ª£ng RAM", "B·ªô nh·ªõ trong", "Pin",
                    "Camera sau", "Camera tr∆∞·ªõc", "K√≠ch th∆∞·ªõc m√†n h√¨nh",
                    "C√¥ng ngh·ªá m√†n h√¨nh", "T√≠nh nƒÉng ƒë·∫∑c bi·ªát", "H·ªó tr·ª£ m·∫°ng"
            };

            for (String spec : importantSpecs) {
                String value = phone.getDescription().getAttribute(spec);
                if (!value.isEmpty()) {
                    // R√∫t g·ªçn n·∫øu qu√° d√†i
                    if (value.length() > 150) {
                        value = value.substring(0, 150) + "...";
                    }
                    context.append("   üìã ").append(spec).append(": ").append(value).append("\n");
                }
            }
            context.append("\n");
        }

        return context.toString();
    }

    /**
     * G·ªçi Gemini API
     */
    private String callGeminiAPI(String question, String phoneContext) {
        try {
            // T·∫°o system prompt chuy√™n nghi·ªáp
            String systemPrompt = """
                B·∫°n l√† chuy√™n gia t∆∞ v·∫•n ƒëi·ªán tho·∫°i chuy√™n nghi·ªáp t·∫°i m·ªôt c·ª≠a h√†ng c√¥ng ngh·ªá h√†ng ƒë·∫ßu Vi·ªát Nam.

                NHI·ªÜM V·ª§:
                - T∆∞ v·∫•n ƒëi·ªán tho·∫°i d·ª±a tr√™n th√¥ng tin s·∫£n ph·∫©m ƒë∆∞·ª£c cung c·∫•p
                - ƒê∆∞a ra l·ªùi khuy√™n chuy√™n nghi·ªáp, kh√°ch quan v√† h·ªØu √≠ch
                - Gi·∫£i th√≠ch r√µ r√†ng, d·ªÖ hi·ªÉu cho ng∆∞·ªùi d√πng

                PHONG C√ÅCH T∆Ø V·∫§N:
                - Th√¢n thi·ªán, nhi·ªát t√¨nh nh∆∞ng chuy√™n nghi·ªáp
                - S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ d·ªÖ ƒë·ªçc
                - ƒê∆∞a ra 2-3 l·ª±a ch·ªçn c·ª• th·ªÉ v·ªõi l√Ω do r√µ r√†ng
                - So s√°nh ∆∞u nh∆∞·ª£c ƒëi·ªÉm m·ªôt c√°ch kh√°ch quan
                - Lu√¥n ƒë·ªÅ c·∫≠p ƒë·∫øn gi√° c·∫£ v√† t√≠nh ph√π h·ª£p
                - K·∫øt th√∫c b·∫±ng c√¢u h·ªèi ƒë·ªÉ ti·∫øp t·ª•c h·ªó tr·ª£

                QUY T·∫ÆC QUAN TR·ªåNG:
                - Ch·ªâ t∆∞ v·∫•n d·ª±a tr√™n th√¥ng tin s·∫£n ph·∫©m ƒë∆∞·ª£c cung c·∫•p
                - Kh√¥ng b·ªãa ƒë·∫∑t th√¥ng tin kh√¥ng c√≥
                - N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m ph√π h·ª£p, gi·∫£i th√≠ch r√µ l√Ω do
                - Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
                """;

            String fullPrompt = systemPrompt + "\n\nüì± TH√îNG TIN S·∫¢N PH·∫®M:\n" + phoneContext +
                    "\n\nüí¨ KH√ÅCH H√ÄNG H·ªéI: " + question +
                    "\n\nüéØ H√ÉY T∆Ø V·∫§N CHUY√äN NGHI·ªÜP:";

            // T·∫°o JSON request cho Gemini API
            JSONObject textPart = new JSONObject();
            textPart.put("text", fullPrompt);

            JSONArray parts = new JSONArray();
            parts.put(textPart);

            JSONObject content = new JSONObject();
            content.put("parts", parts);

            JSONArray contents = new JSONArray();
            contents.put(content);

            // C·∫•u h√¨nh generation
            JSONObject generationConfig = new JSONObject();
            generationConfig.put("temperature", 0.7);
            generationConfig.put("topP", 0.8);
            generationConfig.put("topK", 40);
            generationConfig.put("maxOutputTokens", 2048);

            JSONObject requestBody = new JSONObject();
            requestBody.put("contents", contents);
            requestBody.put("generationConfig", generationConfig);

            // G·ª≠i request ƒë·∫øn Gemini API
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(getApiUrl()))
                    .timeout(Duration.ofSeconds(30))
                    .header("Content-Type", "application/json")
                    .POST(HttpRequest.BodyPublishers.ofString(requestBody.toString()))
                    .build();

            HttpResponse<String> response = httpClient.send(request,
                    HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() == 200) {
                JSONObject jsonResponse = new JSONObject(response.body());
                JSONArray candidates = jsonResponse.getJSONArray("candidates");

                if (candidates.length() > 0) {
                    JSONObject candidate = candidates.getJSONObject(0);
                    JSONObject contentResponse = candidate.getJSONObject("content");
                    JSONArray partsResponse = contentResponse.getJSONArray("parts");

                    if (partsResponse.length() > 0) {
                        String aiResponse = partsResponse.getJSONObject(0).getString("text");
                        System.out.println("‚úÖ Gemini API response received: " + aiResponse.length() + " characters");
                        return aiResponse;
                    }
                }
            } else {
                System.err.println("‚ùå Gemini API HTTP error: " + response.statusCode());
                System.err.println("Response body: " + response.body());

                if (response.statusCode() == 400) {
                    return "‚ùå L·ªói API: Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra API key.";
                } else if (response.statusCode() == 403) {
                    return "‚ùå L·ªói API: API key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt quota.";
                }
            }

        } catch (IOException | InterruptedException e) {
            System.err.println("‚ùå Network error calling Gemini API: " + e.getMessage());
            return "‚ùå L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra internet v√† th·ª≠ l·∫°i.";
        } catch (Exception e) {
            System.err.println("‚ùå Exception calling Gemini API: " + e.getMessage());
            e.printStackTrace();
        }

        return "‚ùå Xin l·ªói, kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi h·ªá th·ªëng AI l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.";
    }

    @Override
    public boolean updateData() {
        // Reload phone data
        phones = phoneRepository.getAllPhones();
        System.out.println("üîÑ ƒê√£ c·∫≠p nh·∫≠t " + phones.size() + " ƒëi·ªán tho·∫°i");
        return true;
    }

    @Override
    public boolean isReady() {
        return isInitialized;
    }

    @Override
    public List<String> getSuggestedQuestions() {
        return Arrays.asList(
                "ƒêi·ªán tho·∫°i n√†o pin tr√¢u nh·∫•t trong t·∫ßm gi√° 15 tri·ªáu?",
                "T∆∞ v·∫•n ƒëi·ªán tho·∫°i ch·ª•p ·∫£nh ƒë·∫πp d∆∞·ªõi 20 tri·ªáu",
                "So s√°nh iPhone v√† Samsung flagship m·ªõi nh·∫•t",
                "ƒêi·ªán tho·∫°i gaming t·ªët nh·∫•t hi·ªán t·∫°i",
                "ƒêi·ªán tho·∫°i n√†o h·ªó tr·ª£ 5G v·ªõi gi√° t·ªët nh·∫•t?",
                "T∆∞ v·∫•n ƒëi·ªán tho·∫°i cho ng∆∞·ªùi gi√† d·ªÖ s·ª≠ d·ª•ng",
                "ƒêi·ªán tho·∫°i h·ªçc sinh sinh vi√™n gi√° r·∫ª ch·∫•t l∆∞·ª£ng"
        );
    }

    /**
     * Get API status info
     */
    public String getAPIStatus() {
        if (!isInitialized) {
            return "‚ùå Ch∆∞a kh·ªüi t·∫°o";
        }

        boolean connected = testAPIConnection();
        return connected ? "‚úÖ K·∫øt n·ªëi b√¨nh th∆∞·ªùng" : "‚ùå M·∫•t k·∫øt n·ªëi API";
    }

    /**
     * Set API key dynamically
     */
    public void setApiKey(String apiKey) {
        GEMINI_API_KEY = apiKey;
        System.out.println("‚úÖ Gemini API key updated");
    }

    /**
     * Get current API URL
     */
    private String getApiUrl() {
        return GEMINI_API_URL_BASE + GEMINI_API_KEY;
    }

    /**
     * Ki·ªÉm tra k·∫øt n·ªëi API
     */
    public boolean testAPIConnection() {
        try {
            String response = callGeminiAPI("Test", "");
            return response != null && !response.isEmpty();
        } catch (Exception e) {
            return false;
        }
    }
}