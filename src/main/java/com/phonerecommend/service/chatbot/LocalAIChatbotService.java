package com.phonerecommend.service.chatbot;

import com.phonerecommend.model.Phone;
import com.phonerecommend.repository.PhoneRepository;
import com.phonerecommend.service.chatbot.ChatbotService;

import java.util.*;
import java.util.stream.Collectors;
import java.util.regex.Pattern;

/**
 * Local AI Chatbot Service - Kh√¥ng c·∫ßn k·∫øt n·ªëi external
 * S·ª≠ d·ª•ng logic th√¥ng minh ƒë·ªÉ t∆∞ v·∫•n d·ª±a tr√™n d·ªØ li·ªáu local
 */
public class LocalAIChatbotService implements ChatbotService {

    private final PhoneRepository phoneRepository;
    private List<Phone> allPhones;
    private boolean isReady = false;

    // Conversation context ƒë·ªÉ nh·ªõ cu·ªôc tr√≤ chuy·ªán
    private Map<String, String> conversationContext = new HashMap<>();

    public LocalAIChatbotService(PhoneRepository phoneRepository) {
        this.phoneRepository = phoneRepository;
    }

    @Override
    public boolean initialize() {
        try {
            System.out.println("ü§ñ Kh·ªüi t·∫°o Local AI Chatbot...");
            allPhones = phoneRepository.getAllPhones();

            if (allPhones.isEmpty()) {
                System.err.println("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒëi·ªán tho·∫°i!");
                return false;
            }

            System.out.println("‚úÖ ƒê√£ load " + allPhones.size() + " ƒëi·ªán tho·∫°i");
            System.out.println("üß† Local AI ready v·ªõi intelligent matching");

            isReady = true;
            return true;

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói kh·ªüi t·∫°o Local AI: " + e.getMessage());
            return false;
        }
    }

    @Override
    public String processQuestion(String question) {
        if (!isReady) {
            return "Chatbot ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng th·ª≠ l·∫°i.";
        }

        if (question == null || question.trim().isEmpty()) {
            return "Vui l√≤ng nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n.";
        }

        try {
            // Normalize question
            String normalizedQuestion = question.toLowerCase().trim();

            // Detect intent v√† extract information
            Intent intent = detectIntent(normalizedQuestion);
            PriceRange priceRange = extractPriceRange(normalizedQuestion);
            List<String> brands = extractBrands(normalizedQuestion);
            List<String> features = extractFeatures(normalizedQuestion);

            // Generate intelligent response
            return generateSmartResponse(intent, priceRange, brands, features, normalizedQuestion);

        } catch (Exception e) {
            System.err.println("‚ùå Error processing question: " + e.getMessage());
            return "Xin l·ªói, ƒë√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i v·ªõi c√¢u h·ªèi kh√°c.";
        }
    }

    /**
     * Detect user intent from question
     */
    private Intent detectIntent(String question) {
        if (question.contains("xin ch√†o") || question.contains("hello") || question.contains("hi")) {
            return Intent.GREETING;
        } else if (question.contains("so s√°nh") || question.contains("kh√°c nhau") || question.contains("vs")) {
            return Intent.COMPARE;
        } else if (question.contains("pin") && (question.contains("tr√¢u") || question.contains("l√¢u") || question.contains("kh·ªèe"))) {
            return Intent.BATTERY;
        } else if (question.contains("camera") || question.contains("ch·ª•p ·∫£nh") || question.contains("quay phim")) {
            return Intent.CAMERA;
        } else if (question.contains("game") || question.contains("gaming") || question.contains("ch∆°i game")) {
            return Intent.GAMING;
        } else if (question.contains("gi√° r·∫ª") || question.contains("ti·∫øt ki·ªám") || question.contains("r·∫ª")) {
            return Intent.BUDGET;
        } else if (question.contains("cao c·∫•p") || question.contains("flagship") || question.contains("ƒë·∫Øt ti·ªÅn")) {
            return Intent.PREMIUM;
        } else if (question.contains("5g") || question.contains("m·∫°ng")) {
            return Intent.NETWORK;
        } else if (question.contains("t∆∞ v·∫•n") || question.contains("g·ª£i √Ω") || question.contains("n√™n mua")) {
            return Intent.RECOMMEND;
        } else {
            return Intent.GENERAL;
        }
    }

    /**
     * Extract price range from question
     */
    private PriceRange extractPriceRange(String question) {
        if (question.contains("d∆∞·ªõi 5") || question.contains("< 5")) {
            return new PriceRange(0, 5_000_000);
        } else if (question.contains("5") && question.contains("10")) {
            return new PriceRange(5_000_000, 10_000_000);
        } else if (question.contains("10") && question.contains("15")) {
            return new PriceRange(10_000_000, 15_000_000);
        } else if (question.contains("15") && question.contains("20")) {
            return new PriceRange(15_000_000, 20_000_000);
        } else if (question.contains("tr√™n 20") || question.contains("> 20")) {
            return new PriceRange(20_000_000, Double.MAX_VALUE);
        } else if (question.contains("d∆∞·ªõi 10")) {
            return new PriceRange(0, 10_000_000);
        } else if (question.contains("d∆∞·ªõi 15")) {
            return new PriceRange(0, 15_000_000);
        } else if (question.contains("d∆∞·ªõi 20")) {
            return new PriceRange(0, 20_000_000);
        }
        return null;
    }

    /**
     * Extract brands from question
     */
    private List<String> extractBrands(String question) {
        List<String> brands = new ArrayList<>();
        if (question.contains("iphone") || question.contains("apple")) brands.add("Apple");
        if (question.contains("samsung") || question.contains("galaxy")) brands.add("Samsung");
        if (question.contains("xiaomi") || question.contains("redmi")) brands.add("Xiaomi");
        if (question.contains("oppo")) brands.add("Oppo");
        if (question.contains("vivo")) brands.add("Vivo");
        if (question.contains("huawei")) brands.add("Huawei");
        if (question.contains("realme")) brands.add("Realme");
        return brands;
    }

    /**
     * Extract features from question
     */
    private List<String> extractFeatures(String question) {
        List<String> features = new ArrayList<>();
        if (question.contains("s·∫°c nhanh")) features.add("fast_charging");
        if (question.contains("kh√°ng n∆∞·ªõc")) features.add("waterproof");
        if (question.contains("v√¢n tay")) features.add("fingerprint");
        if (question.contains("face id") || question.contains("nh·∫≠n di·ªán khu√¥n m·∫∑t")) features.add("face_recognition");
        if (question.contains("wireless") || question.contains("kh√¥ng d√¢y")) features.add("wireless_charging");
        return features;
    }

    /**
     * Generate smart response based on detected intent
     */
    private String generateSmartResponse(Intent intent, PriceRange priceRange,
                                         List<String> brands, List<String> features, String originalQuestion) {

        switch (intent) {
            case GREETING:
                return generateGreetingResponse();

            case COMPARE:
                return generateCompareResponse(brands, priceRange);

            case BATTERY:
                return generateBatteryResponse(priceRange, brands);

            case CAMERA:
                return generateCameraResponse(priceRange, brands);

            case GAMING:
                return generateGamingResponse(priceRange, brands);

            case BUDGET:
                return generateBudgetResponse(priceRange);

            case PREMIUM:
                return generatePremiumResponse();

            case NETWORK:
                return generateNetworkResponse(priceRange);

            case RECOMMEND:
                return generateRecommendResponse(priceRange, brands, features);

            default:
                return generateGeneralResponse(originalQuestion, priceRange, brands);
        }
    }

    private String generateGreetingResponse() {
        return "Xin ch√†o! üëã T√¥i l√† tr·ª£ l√Ω t∆∞ v·∫•n ƒëi·ªán tho·∫°i th√¥ng minh.\n\n" +
                "ü§ñ T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n:\n" +
                "‚Ä¢ T∆∞ v·∫•n ƒëi·ªán tho·∫°i theo ng√¢n s√°ch\n" +
                "‚Ä¢ So s√°nh c√°c d√≤ng m√°y\n" +
                "‚Ä¢ T√¨m ƒëi·ªán tho·∫°i theo nhu c·∫ßu (camera, gaming, pin...)\n" +
                "‚Ä¢ ƒê√°nh gi√° ∆∞u nh∆∞·ª£c ƒëi·ªÉm\n\n" +
                "üí° H√£y cho t√¥i bi·∫øt b·∫°n c·∫ßn t∆∞ v·∫•n g√¨ nh√©!";
    }

    private String generateBatteryResponse(PriceRange priceRange, List<String> brands) {
        List<Phone> phones = filterPhones(priceRange, brands, null);

        // Sort by battery (extract from description)
        List<Phone> batteryPhones = phones.stream()
                .filter(p -> {
                    String battery = p.getDescription().getAttribute("Pin");
                    return battery != null && !battery.isEmpty();
                })
                .sorted((p1, p2) -> {
                    int battery1 = extractBatteryCapacity(p1.getDescription().getAttribute("Pin"));
                    int battery2 = extractBatteryCapacity(p2.getDescription().getAttribute("Pin"));
                    return Integer.compare(battery2, battery1);
                })
                .limit(3)
                .collect(Collectors.toList());

        if (batteryPhones.isEmpty()) {
            return "Hi·ªán t·∫°i kh√¥ng t√¨m th·∫•y ƒëi·ªán tho·∫°i ph√π h·ª£p v·ªõi y√™u c·∫ßu pin c·ªßa b·∫°n. " +
                    "B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt ng√¢n s√°ch c·ª• th·ªÉ ƒë·ªÉ t∆∞ v·∫•n ch√≠nh x√°c h∆°n?";
        }

        StringBuilder response = new StringBuilder("üîã **ƒêi·ªán tho·∫°i pin tr√¢u nh·∫•t** theo y√™u c·∫ßu c·ªßa b·∫°n:\n\n");

        for (int i = 0; i < batteryPhones.size(); i++) {
            Phone phone = batteryPhones.get(i);
            response.append(String.format("**%d. %s**\n", i + 1, phone.getName()));
            response.append(String.format("   üí∞ Gi√°: %,.0f VNƒê\n", phone.getPrice()));
            response.append(String.format("   üîã Pin: %s\n", phone.getDescription().getAttribute("Pin")));
            response.append(String.format("   üì± Chip: %s\n", phone.getDescription().getChipset()));
            response.append("\n");
        }

        response.append("‚ú® **L·ªùi khuy√™n**: ƒê·ªÉ pin b·ªÅn l√¢u, n√™n ch·ªçn ƒëi·ªán tho·∫°i c√≥ dung l∆∞·ª£ng pin ‚â• 4000mAh v√† chip ti·∫øt ki·ªám ƒëi·ªán.\n\n");
        response.append("‚ùì B·∫°n c√≥ c√¢u h·ªèi g√¨ kh√°c v·ªÅ c√°c m·∫´u ƒëi·ªán tho·∫°i n√†y kh√¥ng?");

        return response.toString();
    }

    private String generateCameraResponse(PriceRange priceRange, List<String> brands) {
        List<Phone> phones = filterPhones(priceRange, brands, null);

        // Sort by camera quality (simple heuristic)
        List<Phone> cameraPhones = phones.stream()
                .filter(p -> {
                    String camera = p.getDescription().getRearCamera();
                    return camera != null && !camera.isEmpty();
                })
                .sorted((p1, p2) -> {
                    int score1 = calculateCameraScore(p1);
                    int score2 = calculateCameraScore(p2);
                    return Integer.compare(score2, score1);
                })
                .limit(3)
                .collect(Collectors.toList());

        if (cameraPhones.isEmpty()) {
            return "Hi·ªán t·∫°i kh√¥ng t√¨m th·∫•y th√¥ng tin camera chi ti·∫øt. " +
                    "B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt ng√¢n s√°ch v√† m·ª•c ƒë√≠ch ch·ª•p ·∫£nh ƒë·ªÉ t∆∞ v·∫•n ph√π h·ª£p?";
        }

        StringBuilder response = new StringBuilder("üì∏ **ƒêi·ªán tho·∫°i camera t·ªët nh·∫•t** cho b·∫°n:\n\n");

        for (int i = 0; i < cameraPhones.size(); i++) {
            Phone phone = cameraPhones.get(i);
            response.append(String.format("**%d. %s**\n", i + 1, phone.getName()));
            response.append(String.format("   üí∞ Gi√°: %,.0f VNƒê\n", phone.getPrice()));
            response.append(String.format("   üì∑ Camera sau: %s\n", phone.getDescription().getRearCamera()));
            response.append(String.format("   ü§≥ Camera tr∆∞·ªõc: %s\n", phone.getDescription().getFrontCamera()));

            String cameraFeatures = phone.getDescription().getCameraFeatures();
            if (cameraFeatures != null && !cameraFeatures.isEmpty()) {
                response.append(String.format("   ‚ú® T√≠nh nƒÉng: %s\n", cameraFeatures));
            }
            response.append("\n");
        }

        response.append("üí° **G·ª£i √Ω**: \n");
        response.append("‚Ä¢ iPhone: M√†u s·∫Øc t·ª± nhi√™n, video ·ªïn ƒë·ªãnh\n");
        response.append("‚Ä¢ Samsung: Zoom t·ªët, ch·ª•p ƒë√™m\n");
        response.append("‚Ä¢ Xiaomi: Camera Leica ch·∫•t l∆∞·ª£ng cao\n\n");
        response.append("ü§î B·∫°n ch·ªß y·∫øu ch·ª•p g√¨? Selfie, phong c·∫£nh hay ch·ª•p ƒë√™m?");

        return response.toString();
    }

    private String generateGamingResponse(PriceRange priceRange, List<String> brands) {
        List<Phone> phones = filterPhones(priceRange, brands, null);

        // Sort by gaming performance (RAM + Chip)
        List<Phone> gamingPhones = phones.stream()
                .sorted((p1, p2) -> {
                    int score1 = calculateGamingScore(p1);
                    int score2 = calculateGamingScore(p2);
                    return Integer.compare(score2, score1);
                })
                .limit(3)
                .collect(Collectors.toList());

        StringBuilder response = new StringBuilder("üéÆ **ƒêi·ªán tho·∫°i gaming t·ªët nh·∫•t** trong t·∫ßm gi√°:\n\n");

        for (int i = 0; i < gamingPhones.size(); i++) {
            Phone phone = gamingPhones.get(i);
            response.append(String.format("**%d. %s**\n", i + 1, phone.getName()));
            response.append(String.format("   üí∞ Gi√°: %,.0f VNƒê\n", phone.getPrice()));
            response.append(String.format("   üß† Chip: %s\n", phone.getDescription().getChipset()));
            response.append(String.format("   üíæ RAM: %s\n", phone.getDescription().getRam()));
            response.append(String.format("   üì± M√†n h√¨nh: %s\n", phone.getDescription().getScreenSize()));
            response.append("\n");
        }

        response.append("üöÄ **Tips gaming**: \n");
        response.append("‚Ä¢ RAM ‚â• 8GB cho game m∆∞·ª£t\n");
        response.append("‚Ä¢ M√†n h√¨nh 120Hz cho tr·∫£i nghi·ªám t·ªët\n");
        response.append("‚Ä¢ Pin l·ªõn cho gaming l√¢u\n\n");
        response.append("üéØ B·∫°n ch∆°i game g√¨ ch·ªß y·∫øu? PUBG, Li√™n Qu√¢n hay game n·∫∑ng kh√°c?");

        return response.toString();
    }

    private String generateBudgetResponse(PriceRange priceRange) {
        PriceRange budgetRange = priceRange != null ? priceRange : new PriceRange(0, 10_000_000);
        List<Phone> phones = filterPhones(budgetRange, null, null);

        List<Phone> budgetPhones = phones.stream()
                .sorted(Comparator.comparingDouble(Phone::getPrice))
                .limit(5)
                .collect(Collectors.toList());

        StringBuilder response = new StringBuilder("üí∞ **ƒêi·ªán tho·∫°i gi√° t·ªët** cho b·∫°n:\n\n");

        for (int i = 0; i < budgetPhones.size(); i++) {
            Phone phone = budgetPhones.get(i);
            response.append(String.format("**%d. %s**\n", i + 1, phone.getName()));
            response.append(String.format("   üí∞ Gi√°: %,.0f VNƒê\n", phone.getPrice()));
            response.append(String.format("   ‚≠ê Highlights: %s, %s\n",
                    phone.getDescription().getChipset(),
                    phone.getDescription().getRam()));
            response.append("\n");
        }

        response.append("üí° **L∆∞u √Ω**: ƒêi·ªán tho·∫°i gi√° r·∫ª v·∫´n c√≥ th·ªÉ ƒë√°p ·ª©ng t·ªët nhu c·∫ßu c∆° b·∫£n nh∆∞ g·ªçi ƒëi·ªán, nh·∫Øn tin, m·∫°ng x√£ h·ªôi.\n\n");
        response.append("ü§∑‚Äç‚ôÇÔ∏è B·∫°n c√≥ nhu c·∫ßu ƒë·∫∑c bi·ªát n√†o kh√°c kh√¥ng?");

        return response.toString();
    }

    private String generateCompareResponse(List<String> brands, PriceRange priceRange) {
        if (brands.size() < 2) {
            return "ƒê·ªÉ so s√°nh, b·∫°n h√£y cho t√¥i bi·∫øt 2 h√£ng ho·∫∑c 2 d√≤ng ƒëi·ªán tho·∫°i c·ª• th·ªÉ nh√©!\n\n" +
                    "V√≠ d·ª•: \"So s√°nh iPhone v√† Samsung\" ho·∫∑c \"So s√°nh Galaxy S25 v√† iPhone 16\"";
        }

        StringBuilder response = new StringBuilder("‚öñÔ∏è **So s√°nh gi·ªØa " + String.join(" v√† ", brands) + "**:\n\n");

        for (String brand : brands) {
            List<Phone> brandPhones = filterPhones(priceRange, Arrays.asList(brand), null)
                    .stream().limit(2).collect(Collectors.toList());

            if (!brandPhones.isEmpty()) {
                Phone representative = brandPhones.get(0);
                response.append(String.format("üè∑Ô∏è **%s** (VD: %s)\n", brand, representative.getName()));
                response.append(String.format("   üí∞ Gi√°: %,.0f VNƒê\n", representative.getPrice()));
                response.append(String.format("   üì± Chip: %s\n", representative.getDescription().getChipset()));
                response.append(String.format("   üì∑ Camera: %s\n", representative.getDescription().getRearCamera()));
                response.append("\n");
            }
        }

        response.append("üéØ **K·∫øt lu·∫≠n**: M·ªói h√£ng c√≥ ∆∞u ƒëi·ªÉm ri√™ng. B·∫°n ∆∞u ti√™n t√≠nh nƒÉng n√†o nh·∫•t ƒë·ªÉ t√¥i t∆∞ v·∫•n c·ª• th·ªÉ?");

        return response.toString();
    }

    private String generateGeneralResponse(String question, PriceRange priceRange, List<String> brands) {
        return "ü§ñ T√¥i hi·ªÉu b·∫°n ƒëang t√¨m hi·ªÉu v·ªÅ ƒëi·ªán tho·∫°i.\n\n" +
                "üí° ƒê·ªÉ t∆∞ v·∫•n ch√≠nh x√°c nh·∫•t, b·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt:\n" +
                "‚Ä¢ üí∞ Ng√¢n s√°ch d·ª± ki·∫øn (VD: d∆∞·ªõi 15 tri·ªáu)\n" +
                "‚Ä¢ üéØ M·ª•c ƒë√≠ch ch√≠nh (gaming, camera, c√¥ng vi·ªác...)\n" +
                "‚Ä¢ üè∑Ô∏è Th∆∞∆°ng hi·ªáu y√™u th√≠ch (n·∫øu c√≥)\n" +
                "‚Ä¢ ‚≠ê T√≠nh nƒÉng quan tr·ªçng (pin, camera, m√†n h√¨nh...)\n\n" +
                "üì± Hi·ªán t√¥i c√≥ th√¥ng tin v·ªÅ " + allPhones.size() + " ƒëi·ªán tho·∫°i ƒë·ªÉ t∆∞ v·∫•n cho b·∫°n!\n\n" +
                "‚ùì B·∫°n mu·ªën t√¥i t∆∞ v·∫•n v·ªÅ ƒëi·ªÅu g√¨ c·ª• th·ªÉ?";
    }

    // Helper methods
    private List<Phone> filterPhones(PriceRange priceRange, List<String> brands, List<String> features) {
        return allPhones.stream()
                .filter(phone -> {
                    // Filter by price
                    if (priceRange != null) {
                        double price = phone.getPrice();
                        if (price < priceRange.min || price > priceRange.max) {
                            return false;
                        }
                    }

                    // Filter by brands
                    if (brands != null && !brands.isEmpty()) {
                        String phoneName = phone.getName().toLowerCase();
                        boolean matchesBrand = brands.stream()
                                .anyMatch(brand -> phoneName.contains(brand.toLowerCase()));
                        if (!matchesBrand) {
                            return false;
                        }
                    }

                    return true;
                })
                .collect(Collectors.toList());
    }

    private int extractBatteryCapacity(String batteryInfo) {
        if (batteryInfo == null) return 0;
        try {
            String numericPart = batteryInfo.replaceAll("[^0-9]", "");
            return numericPart.isEmpty() ? 0 : Integer.parseInt(numericPart);
        } catch (NumberFormatException e) {
            return 0;
        }
    }

    private int calculateCameraScore(Phone phone) {
        int score = 0;
        String camera = phone.getDescription().getRearCamera();
        if (camera != null) {
            if (camera.contains("48") || camera.contains("50")) score += 30;
            if (camera.contains("64")) score += 35;
            if (camera.contains("108") || camera.contains("200")) score += 50;
            if (camera.toLowerCase().contains("leica")) score += 20;
            if (camera.toLowerCase().contains("ultra")) score += 15;
        }

        // Price bonus (higher price usually means better camera)
        if (phone.getPrice() > 20_000_000) score += 25;
        else if (phone.getPrice() > 15_000_000) score += 15;
        else if (phone.getPrice() > 10_000_000) score += 10;

        return score;
    }

    private int calculateGamingScore(Phone phone) {
        int score = 0;

        // RAM score
        String ram = phone.getDescription().getRam();
        if (ram != null) {
            if (ram.contains("12") || ram.contains("16")) score += 40;
            else if (ram.contains("8")) score += 30;
            else if (ram.contains("6")) score += 20;
        }

        // Chip score
        String chip = phone.getDescription().getChipset();
        if (chip != null) {
            chip = chip.toLowerCase();
            if (chip.contains("snapdragon 8") || chip.contains("a17") || chip.contains("a18")) score += 50;
            else if (chip.contains("snapdragon 7") || chip.contains("a15") || chip.contains("a16")) score += 40;
            else if (chip.contains("dimensity 9") || chip.contains("snapdragon 888")) score += 35;
        }

        return score;
    }

    @Override
    public boolean updateData() {
        return initialize();
    }

    @Override
    public boolean isReady() {
        return isReady;
    }

    @Override
    public List<String> getSuggestedQuestions() {
        return Arrays.asList(
                "Xin ch√†o! T√¥i c·∫ßn t∆∞ v·∫•n ƒëi·ªán tho·∫°i",
                "ƒêi·ªán tho·∫°i n√†o pin tr√¢u nh·∫•t d∆∞·ªõi 15 tri·ªáu?",
                "T∆∞ v·∫•n ƒëi·ªán tho·∫°i ch·ª•p ·∫£nh ƒë·∫πp kho·∫£ng 20 tri·ªáu",
                "So s√°nh iPhone v√† Samsung",
                "ƒêi·ªán tho·∫°i gaming t·ªët nh·∫•t trong t·∫ßm gi√°",
                "ƒêi·ªán tho·∫°i gi√° r·∫ª d∆∞·ªõi 10 tri·ªáu"
        );
    }

    // Inner classes
    private enum Intent {
        GREETING, COMPARE, BATTERY, CAMERA, GAMING, BUDGET, PREMIUM, NETWORK, RECOMMEND, GENERAL
    }

    private static class PriceRange {
        final double min, max;

        PriceRange(double min, double max) {
            this.min = min;
            this.max = max;
        }
    }
    // Th√™m v√†o cu·ªëi class LocalAIChatbotService, tr∆∞·ªõc d·∫•u }

    private String generatePremiumResponse() {
        List<Phone> phones = filterPhones(new PriceRange(20_000_000, Double.MAX_VALUE), null, null);

        List<Phone> premiumPhones = phones.stream()
                .sorted(Comparator.comparingDouble(Phone::getPrice).reversed())
                .limit(3)
                .collect(Collectors.toList());

        StringBuilder response = new StringBuilder("üíé **ƒêi·ªán tho·∫°i cao c·∫•p flagship** ƒë√°ng mua:\n\n");

        for (int i = 0; i < premiumPhones.size(); i++) {
            Phone phone = premiumPhones.get(i);
            response.append(String.format("**%d. %s**\n", i + 1, phone.getName()));
            response.append(String.format("   üí∞ Gi√°: %,.0f VNƒê\n", phone.getPrice()));
            response.append(String.format("   üß† Chip: %s\n", phone.getDescription().getChipset()));
            response.append(String.format("   üíæ RAM: %s\n", phone.getDescription().getRam()));
            response.append("\n");
        }

        response.append("‚ú® **Flagship features**: Camera pro, chip m·∫°nh nh·∫•t, build quality cao c·∫•p.\n\n");
        response.append("ü§î B·∫°n c√≥ y√™u c·∫ßu ƒë·∫∑c bi·ªát n√†o cho chi·∫øc flagship n√†y kh√¥ng?");

        return response.toString();
    }

    private String generateNetworkResponse(PriceRange priceRange) {
        List<Phone> phones = filterPhones(priceRange, null, null);

        List<Phone> networkPhones = phones.stream()
                .filter(p -> {
                    String network = p.getDescription().getNetworkSupport();
                    return network != null && network.contains("5G");
                })
                .sorted(Comparator.comparingDouble(Phone::getPrice))
                .limit(3)
                .collect(Collectors.toList());

        if (networkPhones.isEmpty()) {
            return "üîç Kh√¥ng t√¨m th·∫•y ƒëi·ªán tho·∫°i 5G trong t·∫ßm gi√° n√†y.\n\n" +
                    "üí° H·∫ßu h·∫øt ƒëi·ªán tho·∫°i t·ª´ 8 tri·ªáu tr·ªü l√™n ƒë·ªÅu h·ªó tr·ª£ 5G.\n" +
                    "B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt ng√¢n s√°ch c·ª• th·ªÉ?";
        }

        StringBuilder response = new StringBuilder("üì∂ **ƒêi·ªán tho·∫°i h·ªó tr·ª£ 5G** t·ªët nh·∫•t:\n\n");

        for (int i = 0; i < networkPhones.size(); i++) {
            Phone phone = networkPhones.get(i);
            response.append(String.format("**%d. %s**\n", i + 1, phone.getName()));
            response.append(String.format("   üí∞ Gi√°: %,.0f VNƒê\n", phone.getPrice()));
            response.append(String.format("   üì∂ M·∫°ng: %s\n", phone.getDescription().getNetworkSupport()));
            response.append(String.format("   üß† Chip: %s\n", phone.getDescription().getChipset()));
            response.append("\n");
        }

        response.append("üöÄ **L·ª£i √≠ch 5G**: T·ªëc ƒë·ªô nhanh, ƒë·ªô tr·ªÖ th·∫•p, streaming 4K m∆∞·ª£t.\n\n");
        response.append("üìç B·∫°n c√≥ d√πng 5G th∆∞·ªùng xuy√™n kh√¥ng?");

        return response.toString();
    }

    private String generateRecommendResponse(PriceRange priceRange, List<String> brands, List<String> features) {
        List<Phone> phones = filterPhones(priceRange, brands, features);

        if (phones.isEmpty()) {
            return "üîç Kh√¥ng t√¨m th·∫•y ƒëi·ªán tho·∫°i ph√π h·ª£p v·ªõi ti√™u ch√≠.\n\n" +
                    "üí° G·ª£i √Ω:\n" +
                    "‚Ä¢ M·ªü r·ªông ng√¢n s√°ch\n" +
                    "‚Ä¢ Th·ª≠ th∆∞∆°ng hi·ªáu kh√°c\n" +
                    "‚Ä¢ Gi·∫£m y√™u c·∫ßu t√≠nh nƒÉng\n\n" +
                    "ü§î B·∫°n c√≥ th·ªÉ linh ho·∫°t ti√™u ch√≠ n√†o?";
        }

        // Sort by overall score
        List<Phone> recommendedPhones = phones.stream()
                .sorted((p1, p2) -> {
                    int score1 = calculateOverallScore(p1);
                    int score2 = calculateOverallScore(p2);
                    return Integer.compare(score2, score1);
                })
                .limit(3)
                .collect(Collectors.toList());

        StringBuilder response = new StringBuilder("üéØ **ƒêi·ªán tho·∫°i ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t** cho b·∫°n:\n\n");

        for (int i = 0; i < recommendedPhones.size(); i++) {
            Phone phone = recommendedPhones.get(i);
            response.append(String.format("**%d. %s** ‚≠ê\n", i + 1, phone.getName()));
            response.append(String.format("   üí∞ Gi√°: %,.0f VNƒê\n", phone.getPrice()));
            response.append(String.format("   üß† Chip: %s\n", phone.getDescription().getChipset()));
            response.append(String.format("   üíæ RAM: %s\n", phone.getDescription().getRam()));
            response.append(String.format("   üì∑ Camera: %s\n", phone.getDescription().getRearCamera()));
            response.append(String.format("   üîã Pin: %s\n", phone.getDescription().getAttribute("Pin")));
            response.append("\n");
        }

        response.append("üí° **L√Ω do ƒë·ªÅ xu·∫•t**: C√¢n b·∫±ng t·ªët gi·ªØa hi·ªáu nƒÉng, gi√° c·∫£ v√† t√≠nh nƒÉng.\n\n");
        response.append("‚ùì B·∫°n mu·ªën t√¨m hi·ªÉu chi ti·∫øt v·ªÅ ƒëi·ªán tho·∫°i n√†o?");

        return response.toString();
    }

    private int calculateOverallScore(Phone phone) {
        int score = 0;

        // Price score (lower price = higher score in budget range)
        double price = phone.getPrice();
        if (price < 10_000_000) score += 20;
        else if (price < 15_000_000) score += 25;
        else if (price < 20_000_000) score += 30;
        else score += 15;

        // Combine camera and gaming scores
        score += calculateCameraScore(phone) / 2;
        score += calculateGamingScore(phone) / 2;

        return score;
    }
}