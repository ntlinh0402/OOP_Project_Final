package com.phonerecommend.service.chatbot;

import com.phonerecommend.model.Phone;
import com.phonerecommend.repository.PhoneRepository;
import com.phonerecommend.service.chatbot.ChatbotService;

import java.io.IOException;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.*;
import java.util.stream.Collectors;
import java.util.Scanner;

import org.json.JSONObject;
import org.json.JSONArray;

/**
 * Gemini AI Chatbot Service - S·ª≠ d·ª•ng Google Gemini AI API
 * Chatbot th√¥ng minh c√≥ th·ªÉ giao ti·∫øp t·ª± nhi√™n v√† t∆∞ v·∫•n ƒëi·ªán tho·∫°i
 */
public class GeminiAIChatbotService implements ChatbotService {

    private final PhoneRepository phoneRepository;
    private List<Phone> allPhones;
    private boolean isReady = false;

    // Gemini AI Configuration
    private static final String GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";
    private final String apiKey;

    // Conversation history ƒë·ªÉ maintain context
    private List<ConversationMessage> conversationHistory = new ArrayList<>();
    private static final int MAX_HISTORY_SIZE = 10;

    public GeminiAIChatbotService(PhoneRepository phoneRepository, String geminiApiKey) {
        this.phoneRepository = phoneRepository;
        this.apiKey = geminiApiKey;
    }

    @Override
    public boolean initialize() {
        try {
            System.out.println("ü§ñ Kh·ªüi t·∫°o Gemini AI Chatbot...");

            if (apiKey == null || apiKey.trim().isEmpty()) {
                System.err.println("‚ùå API Key kh√¥ng h·ª£p l·ªá!");
                return false;
            }

            // Load phone data
            allPhones = phoneRepository.getAllPhones();
            if (allPhones.isEmpty()) {
                System.err.println("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒëi·ªán tho·∫°i!");
                return false;
            }

            // Test API connection
            if (!testGeminiConnection()) {
                System.err.println("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Gemini API!");
                return false;
            }

            System.out.println("‚úÖ ƒê√£ load " + allPhones.size() + " ƒëi·ªán tho·∫°i");
            System.out.println("üß† Gemini AI s·∫µn s√†ng!");

            isReady = true;
            return true;

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói kh·ªüi t·∫°o Gemini AI: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public String processQuestion(String question) {
        if (!isReady) {
            return "Chatbot ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng th·ª≠ l·∫°i.";
        }

        if (question == null || question.trim().isEmpty()) {
            return "Vui l√≤ng nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n.";
        }

        try {
            // Add user message to history
            addToHistory("user", question);

            // Get relevant phone data based on question
            String relevantPhones = getRelevantPhonesContext(question);

            // Create prompt with context
            String fullPrompt = createPromptWithContext(question, relevantPhones);

            // Call Gemini API
            String response = callGeminiAPI(fullPrompt);

            // Add response to history
            addToHistory("assistant", response);

            return response;

        } catch (Exception e) {
            System.err.println("‚ùå Error calling Gemini API: " + e.getMessage());
            return "Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.";
        }
    }

    /**
     * Test Gemini API connection
     */
    private boolean testGeminiConnection() {
        try {
            String testPrompt = "Tr·∫£ l·ªùi ng·∫Øn g·ªçn: B·∫°n c√≥ th·ªÉ n√≥i ti·∫øng Vi·ªát kh√¥ng?";
            String response = callGeminiAPI(testPrompt);
            return response != null && !response.trim().isEmpty();
        } catch (Exception e) {
            System.err.println("‚ùå Test connection failed: " + e.getMessage());
            return false;
        }
    }

    /**
     * Call Gemini AI API
     */
    private String callGeminiAPI(String prompt) throws IOException {
        URL url = new URL(GEMINI_API_URL + "?key=" + apiKey);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();

        try {
            // Setup connection
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setDoOutput(true);
            conn.setConnectTimeout(30000); // 30 seconds
            conn.setReadTimeout(60000);    // 60 seconds

            // Create request body
            JSONObject requestBody = new JSONObject();
            JSONArray contents = new JSONArray();
            JSONObject content = new JSONObject();
            JSONArray parts = new JSONArray();
            JSONObject part = new JSONObject();

            part.put("text", prompt);
            parts.put(part);
            content.put("parts", parts);
            contents.put(content);
            requestBody.put("contents", contents);

            // Add generation config for better responses
            JSONObject generationConfig = new JSONObject();
            generationConfig.put("temperature", 0.7);
            generationConfig.put("topP", 0.8);
            generationConfig.put("topK", 40);
            generationConfig.put("maxOutputTokens", 2048);
            requestBody.put("generationConfig", generationConfig);

            // Send request
            try (OutputStream os = conn.getOutputStream()) {
                byte[] input = requestBody.toString().getBytes(StandardCharsets.UTF_8);
                os.write(input, 0, input.length);
            }

            // Read response
            int responseCode = conn.getResponseCode();
            Scanner scanner;

            if (responseCode == 200) {
                scanner = new Scanner(conn.getInputStream(), StandardCharsets.UTF_8);
            } else {
                scanner = new Scanner(conn.getErrorStream(), StandardCharsets.UTF_8);
                String errorResponse = scanner.useDelimiter("\\A").next();
                throw new IOException("API Error " + responseCode + ": " + errorResponse);
            }

            String response = scanner.useDelimiter("\\A").next();
            scanner.close();

            // Parse response
            JSONObject jsonResponse = new JSONObject(response);

            if (jsonResponse.has("candidates")) {
                JSONArray candidates = jsonResponse.getJSONArray("candidates");
                if (candidates.length() > 0) {
                    JSONObject candidate = candidates.getJSONObject(0);
                    if (candidate.has("content")) {
                        JSONObject content_response = candidate.getJSONObject("content");
                        if (content_response.has("parts")) {
                            JSONArray parts_response = content_response.getJSONArray("parts");
                            if (parts_response.length() > 0) {
                                JSONObject part_response = parts_response.getJSONObject(0);
                                if (part_response.has("text")) {
                                    return part_response.getString("text");
                                }
                            }
                        }
                    }
                }
            }

            throw new IOException("Unexpected response format from Gemini API");

        } finally {
            conn.disconnect();
        }
    }

    /**
     * Get relevant phones based on user question
     */
    private String getRelevantPhonesContext(String question) {
        String lowerQuestion = question.toLowerCase();
        List<Phone> relevantPhones = new ArrayList<>();

        // Extract price range
        PriceRange priceRange = extractPriceRange(lowerQuestion);

        // Extract brands
        List<String> brands = extractBrands(lowerQuestion);

        // Filter phones
        relevantPhones = allPhones.stream()
                .filter(phone -> {
                    if (priceRange != null) {
                        double price = phone.getPrice();
                        if (price < priceRange.min || price > priceRange.max) {
                            return false;
                        }
                    }

                    if (!brands.isEmpty()) {
                        String phoneName = phone.getName().toLowerCase();
                        boolean matchesBrand = brands.stream()
                                .anyMatch(brand -> phoneName.contains(brand.toLowerCase()));
                        if (!matchesBrand) {
                            return false;
                        }
                    }

                    return true;
                })
                .limit(10) // Limit to 10 phones for context
                .collect(Collectors.toList());

        // If no specific filters, get top phones by price range
        if (relevantPhones.isEmpty()) {
            relevantPhones = allPhones.stream()
                    .limit(10)
                    .collect(Collectors.toList());
        }

        // Format phone data for AI
        StringBuilder phoneContext = new StringBuilder();
        for (Phone phone : relevantPhones) {
            phoneContext.append("- ").append(phone.getName())
                    .append(" (Gi√°: ").append(String.format("%,.0f", phone.getPrice())).append(" VNƒê")
                    .append(", Chip: ").append(phone.getDescription().getChipset())
                    .append(", RAM: ").append(phone.getDescription().getRam())
                    .append(", Camera: ").append(phone.getDescription().getRearCamera())
                    .append(")\n");
        }

        return phoneContext.toString();
    }

    /**
     * Create prompt with context
     */
    private String createPromptWithContext(String userQuestion, String phoneData) {
        StringBuilder prompt = new StringBuilder();

        prompt.append("B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n ƒëi·ªán tho·∫°i th√¥ng minh, th√¢n thi·ªán v√† am hi·ªÉu v·ªÅ c√¥ng ngh·ªá. ");
        prompt.append("H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng m·ªôt c√°ch t·ª± nhi√™n, chi ti·∫øt v√† h·ªØu √≠ch.\n\n");

        prompt.append("NGUY√äN T·∫ÆC T∆Ø V·∫§N:\n");
        prompt.append("- Lu√¥n th√¢n thi·ªán, nhi·ªát t√¨nh\n");
        prompt.append("- ƒê∆∞a ra l·ªùi khuy√™n c·ª• th·ªÉ d·ª±a tr√™n d·ªØ li·ªáu\n");
        prompt.append("- Gi·∫£i th√≠ch r√µ ∆∞u nh∆∞·ª£c ƒëi·ªÉm\n");
        prompt.append("- H·ªèi th√™m th√¥ng tin n·∫øu c·∫ßn\n");
        prompt.append("- S·ª≠ d·ª•ng emoji ph√π h·ª£p\n\n");

        prompt.append("D·ªÆ LI·ªÜU ƒêI·ªÜN THO·∫†I HI·ªÜN C√ì:\n");
        prompt.append(phoneData);
        prompt.append("\n");

        // Add conversation history for context
        if (!conversationHistory.isEmpty()) {
            prompt.append("L·ªäCH S·ª¨ CU·ªòC TR√í CHUY·ªÜN:\n");
            for (ConversationMessage msg : conversationHistory) {
                prompt.append(msg.role).append(": ").append(msg.content).append("\n");
            }
            prompt.append("\n");
        }

        prompt.append("C√ÇU H·ªéI C·ª¶A KH√ÅCH H√ÄNG: ").append(userQuestion).append("\n\n");
        prompt.append("H√ÉY TR·∫¢ L·ªúI:");

        return prompt.toString();
    }

    /**
     * Extract price range from question
     */
    private PriceRange extractPriceRange(String question) {
        if (question.contains("d∆∞·ªõi 5") || question.contains("< 5")) {
            return new PriceRange(0, 5_000_000);
        } else if (question.contains("5") && question.contains("10")) {
            return new PriceRange(5_000_000, 10_000_000);
        } else if (question.contains("10") && question.contains("15")) {
            return new PriceRange(10_000_000, 15_000_000);
        } else if (question.contains("15") && question.contains("20")) {
            return new PriceRange(15_000_000, 20_000_000);
        } else if (question.contains("tr√™n 20") || question.contains("> 20")) {
            return new PriceRange(20_000_000, Double.MAX_VALUE);
        } else if (question.contains("d∆∞·ªõi 10")) {
            return new PriceRange(0, 10_000_000);
        } else if (question.contains("d∆∞·ªõi 15")) {
            return new PriceRange(0, 15_000_000);
        } else if (question.contains("d∆∞·ªõi 20")) {
            return new PriceRange(0, 20_000_000);
        }
        return null;
    }

    /**
     * Extract brands from question
     */
    private List<String> extractBrands(String question) {
        List<String> brands = new ArrayList<>();
        if (question.contains("iphone") || question.contains("apple")) brands.add("Apple");
        if (question.contains("samsung") || question.contains("galaxy")) brands.add("Samsung");
        if (question.contains("xiaomi") || question.contains("redmi")) brands.add("Xiaomi");
        if (question.contains("oppo")) brands.add("Oppo");
        if (question.contains("vivo")) brands.add("Vivo");
        if (question.contains("huawei")) brands.add("Huawei");
        if (question.contains("realme")) brands.add("Realme");
        return brands;
    }

    /**
     * Add message to conversation history
     */
    private void addToHistory(String role, String content) {
        conversationHistory.add(new ConversationMessage(role, content));

        // Keep only recent messages
        if (conversationHistory.size() > MAX_HISTORY_SIZE) {
            conversationHistory.remove(0);
        }
    }

    @Override
    public boolean updateData() {
        return initialize();
    }

    @Override
    public boolean isReady() {
        return isReady;
    }

    @Override
    public List<String> getSuggestedQuestions() {
        return Arrays.asList(
                "Xin ch√†o! T√¥i c·∫ßn t∆∞ v·∫•n ƒëi·ªán tho·∫°i",
                "ƒêi·ªán tho·∫°i n√†o pin tr√¢u nh·∫•t d∆∞·ªõi 15 tri·ªáu?",
                "T∆∞ v·∫•n ƒëi·ªán tho·∫°i ch·ª•p ·∫£nh ƒë·∫πp kho·∫£ng 20 tri·ªáu",
                "So s√°nh iPhone v√† Samsung Galaxy",
                "ƒêi·ªán tho·∫°i gaming t·ªët nh·∫•t trong t·∫ßm gi√°",
                "ƒêi·ªán tho·∫°i gi√° r·∫ª d∆∞·ªõi 10 tri·ªáu c√≥ g√¨ hay?",
                "N√™n mua ƒëi·ªán tho·∫°i h√£ng n√†o trong nƒÉm 2025?",
                "T∆∞ v·∫•n ƒëi·ªán tho·∫°i cho h·ªçc sinh sinh vi√™n"
        );
    }

    // Inner classes
    private static class ConversationMessage {
        String role;
        String content;

        ConversationMessage(String role, String content) {
            this.role = role;
            this.content = content;
        }
    }

    private static class PriceRange {
        final double min, max;

        PriceRange(double min, double max) {
            this.min = min;
            this.max = max;
        }
    }
}