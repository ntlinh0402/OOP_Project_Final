package com.phonerecommend.controller;

import com.phonerecommend.repository.PhoneRepository;
import com.phonerecommend.repository.RepositoryFactory;
import com.phonerecommend.service.chatbot.ChatbotService;
import com.phonerecommend.service.chatbot.DirectGeminiChatbotImpl;
import com.phonerecommend.service.chatbot.RAGChatbotImpl;

import java.util.List;
import java.util.concurrent.CompletableFuture;

/**
 * Controller x·ª≠ l√Ω chatbot v·ªõi switching gi·ªØa AI engines
 */
public class ChatbotController {
    private final ChatbotService chatbotService;
    private final boolean useGeminiAPI;

    /**
     * Constructor m·∫∑c ƒë·ªãnh - s·ª≠ d·ª•ng Gemini API
     */
    public ChatbotController() {
        this(false); // false = s·ª≠ d·ª•ng Gemini API
    }

    /**
     * Constructor v·ªõi l·ª±a ch·ªçn lo·∫°i chatbot
     * @param useLocalRAG true ƒë·ªÉ s·ª≠ d·ª•ng Local RAG, false ƒë·ªÉ s·ª≠ d·ª•ng Gemini API
     */
    public ChatbotController(boolean useLocalRAG) {
        PhoneRepository phoneRepository = RepositoryFactory.getPhoneRepository();
        this.useGeminiAPI = !useLocalRAG;

        if (useLocalRAG) {
            System.out.println("ü§ñ Kh·ªüi t·∫°o Local RAG Chatbot...");
            this.chatbotService = new RAGChatbotImpl(phoneRepository);
        } else {
            System.out.println("ü§ñ Kh·ªüi t·∫°o Gemini API Chatbot...");
            this.chatbotService = new DirectGeminiChatbotImpl(phoneRepository);
        }

        initializeChatbot();
    }

    /**
     * Kh·ªüi t·∫°o chatbot
     */
    private void initializeChatbot() {
        if (!chatbotService.isReady()) {
            System.out.println("üîÑ ƒêang kh·ªüi t·∫°o chatbot...");
            boolean success = chatbotService.initialize();

            if (success) {
                System.out.println("‚úÖ Chatbot ƒë√£ s·∫µn s√†ng!");
            } else {
                System.err.println("‚ùå L·ªói kh·ªüi t·∫°o chatbot!");

                if (useGeminiAPI) {
                    System.err.println("üí° Ki·ªÉm tra l·∫°i Gemini API key trong DirectGeminiChatbotImpl.java");
                    System.err.println("üåê L·∫•y API key t·∫°i: https://aistudio.google.com/");
                }
            }
        }
    }

    /**
     * X·ª≠ l√Ω c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng
     * @param question C√¢u h·ªèi
     * @return C√¢u tr·∫£ l·ªùi
     */
    public String processQuestion(String question) {
        // ƒê·∫£m b·∫£o chatbot ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
        if (!chatbotService.isReady()) {
            initializeChatbot();
        }

        // X·ª≠ l√Ω c√¢u h·ªèi
        return chatbotService.processQuestion(question);
    }

    /**
     * X·ª≠ l√Ω c√¢u h·ªèi b·∫•t ƒë·ªìng b·ªô (kh√¥ng block UI)
     * @param question C√¢u h·ªèi
     * @return CompletableFuture ch·ª©a c√¢u tr·∫£ l·ªùi
     */
    public CompletableFuture<String> processQuestionAsync(String question) {
        return CompletableFuture.supplyAsync(() -> processQuestion(question));
    }

    /**
     * L·∫•y danh s√°ch c√¢u h·ªèi g·ª£i √Ω
     * @return Danh s√°ch c√¢u h·ªèi g·ª£i √Ω
     */
    public List<String> getSuggestedQuestions() {
        return chatbotService.getSuggestedQuestions();
    }

    /**
     * C·∫≠p nh·∫≠t d·ªØ li·ªáu cho chatbot
     * @return true n·∫øu c·∫≠p nh·∫≠t th√†nh c√¥ng, false n·∫øu th·∫•t b·∫°i
     */
    public boolean updateChatbotData() {
        return chatbotService.updateData();
    }

    /**
     * Ki·ªÉm tra xem chatbot ƒë√£ s·∫µn s√†ng ch∆∞a
     * @return true n·∫øu ƒë√£ s·∫µn s√†ng, false n·∫øu ch∆∞a
     */
    public boolean isChatbotReady() {
        return chatbotService.isReady();
    }

    /**
     * Ki·ªÉm tra k·∫øt n·ªëi API
     * @return true n·∫øu k·∫øt n·ªëi OK, false n·∫øu kh√¥ng
     */
    public boolean testAPIConnection() {
        if (useGeminiAPI && chatbotService instanceof DirectGeminiChatbotImpl) {
            return ((DirectGeminiChatbotImpl) chatbotService).testAPIConnection();
        }
        return chatbotService.isReady();
    }

    /**
     * Test nhanh chatbot v·ªõi c√¢u h·ªèi ƒë∆°n gi·∫£n
     * @return K·∫øt qu·∫£ test
     */
    public String quickTest() {
        if (!isChatbotReady()) {
            return "‚ùå Chatbot ch∆∞a s·∫µn s√†ng";
        }

        try {
            String testQuestion = "Xin ch√†o";
            String response = processQuestion(testQuestion);
            return "‚úÖ Test th√†nh c√¥ng: " + response.substring(0, Math.min(100, response.length())) + "...";
        } catch (Exception e) {
            return "‚ùå Test th·∫•t b·∫°i: " + e.getMessage();
        }
    }

    /**
     * L·∫•y th√¥ng tin v·ªÅ chatbot
     * @return Th√¥ng tin chatbot
     */
    public String getChatbotInfo() {
        if (chatbotService instanceof DirectGeminiChatbotImpl) {
            DirectGeminiChatbotImpl gemini = (DirectGeminiChatbotImpl) chatbotService;
            return "Direct Gemini API Chatbot - " + gemini.getAPIStatus();
        } else if (chatbotService instanceof RAGChatbotImpl) {
            return "Local RAG Chatbot - ‚úÖ Ho·∫°t ƒë·ªông";
        } else {
            return "Unknown Chatbot Type";
        }
    }
}